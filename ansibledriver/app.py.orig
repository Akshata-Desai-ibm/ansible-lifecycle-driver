import ansibledriver.openapi as openapi
import logging
import pathlib
import ignition.boot.app as ignition_app
from ignition.boot.connexionutils import RequestBodyValidator, build_resolver_to_instance
from ansibledriver.service.lifecycle import AnsibleVNFCDriver
from ansibledriver.service.ansible import AnsibleClient
from ansibledriver.service.queue import WorkerQueue

#Grabs the __init__.py from the openapi package then takes it's parent, the openapi directory itself
openapi_path = pathlib.Path(openapi.__file__).parent

def __connexion_init_args():
    connexion_init_props = {}
    connexion_init_props['specification_dir'] = 'openapi'
    return connexion_init_props


def init_app():
    # set up logging to file
    # logging.basicConfig(level=logging.DEBUG,
    #                     format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
    #                     datefmt='%m-%d %H:%M',
    #                     filename='ansibledriver.log',
    #                     filemode='w')
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)

    configuration = ignition_app.vnfc_driver_config()
    configuration.name = 'AnsibleVNFCDriver'
    configuration.server.port = 8293
    # configuration.connexion_runtime_props = {
    #     'threaded': True
    #     # 'threaded': False,
    #     # 'processes': 8
    # }
<<<<<<< HEAD
    configuration.messaging.connection_address = 'kafka.lm:31090'
    configuration.bootstrap.lifecycle.service_driver = ignition_app.service(AnsibleVNFCDriver, AnsibleClient())
=======

    worker_queue = WorkerQueue()
    ansible_client = AnsibleClient(worker_queue)

    configuration.messaging.connection_address = 'kafka:9092'
    configuration.bootstrap.lifecycle.service_driver = ignition_app.service(AnsibleVNFCDriver, ansible_client)
>>>>>>> origin/NFV-2868

    app = ignition_app.configure(configuration)
    # app.connexion_app.add_api(connexion_api['api_spec'], **connexion_api['kwargs'])
    app.run()

    # connexion_api = {
    #     'api_spec': 'ansible.yaml',
    #     'kwargs': {
    #         'resolver': build_resolver_to_instance(ansible_client),
    #         'validator_map': {
    #             'body': RequestBodyValidator
    #         }
    #     }
    # }
    # ansible_app = connexion.App(app_name + '_ansible', **__connexion_init_args())
    # ansible_app.add_api(connexion_api['api_spec'], **connexion_api['kwargs'])
    # ansible_app.run()
